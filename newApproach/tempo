`Chat` component is a full-featured **React chat interface** that allows users to:

* Chat with a bot,
* Upload files (especially CSVs to generate charts),
* View past conversations grouped by date,
* Revisit or delete conversations,
* Handle user login/logout,
* Display charts (via Highcharts),
* And auto-scroll/focus UX behavior.

Breaking it down **section by section**:

---

### 🔧 **1. State Management**

The `useState` hooks manage the app’s dynamic data:

* `messages`: Current chat messages (user + bot).
* `inputMessage`: The message being typed.
* `isLoading`: Whether the bot is "thinking".
* `selectedFile`, `filePreview`: File upload and preview management.
* `userId`, `username`: Persisted user session from `localStorage`.
* `conversations`: Conversation history grouped by date.
* `selectedConversation`: Currently opened conversation.
* `isSidebarOpen`: Toggle for chat history sidebar.

---

### 📦 **2. useEffect Hooks (Side Effects)**

These handle auto behaviors:

* **Scroll** to bottom when messages update.
* **Fetch conversations** on login (`userId` changes).
* **Focus** input when loading completes or on load.
* **Redirect** to login if user is not authenticated.

---

### 🧠 **3. Core Functions**

#### 💬 `sendMessage()`

* Prepares message (with optional file),
* Sends to backend via `axios.post('/chat')`,
* Updates chat with bot response,
* Displays errors if any.

#### 📁 `handleFileChange()` / `clearFileSelection()`

* Handles user file uploads (e.g., image, CSV).
* Shows a preview for images or CSV indicator.
* Clears selection on request.

#### 💾 `fetchConversations()` + `groupConversationsByDate()`

* Fetches chat history from the backend.
* Organizes them by human-readable date.

#### 🔁 `loadConversation()`

* Loads a specific conversation when clicked.
* Displays the user and bot messages, including charts/files.

#### 🗑️ `deleteConversation()`

* Deletes a conversation from the backend.

#### ✨ `startNewConversation()`

* Clears chat to start a fresh session.

#### 🔀 `toggleSidebar()`

* Collapses/expands the chat history pane.

---

### 🎨 **4. Rendering Helpers**

#### 📎 `renderFilePreview()`

* Displays file preview above the input box.

#### 📊 `renderChart()`

* Uses `HighchartsReact` to render chart from `chartConfig`.

#### 📨 `renderMessage()`

* Shows each message with:

  * Text,
  * File attachments (previews or download links),
  * Charts (if applicable),
  * Timestamps.

---

### 🧱 **5. UI Structure**

#### 📚 Sidebar

* **Header**: "Chat History" and New Chat button.
* **Grouped Conversations** by date.
* **Footer**: Logout (if logged in) or login prompt.

#### 💬 Chat Container

* **Header**: "Chatbot".
* **Messages**: List of messages, loading spinner.
* **Input Field**: Text + file attachment + send.

---

### 🔐 **6. Auth Handling**

* If `userId` doesn't exist in `localStorage`, it redirects to `/` (login).
* Logout clears `localStorage` and redirects as well.

---

### 🧠 Smart Features

* Files: CSV files trigger backend to generate a chart.
* Auto focus: Keeps UX seamless while interacting.
* Grouped history: Easier navigation of past chats.
* Chat replay: Click a history item to reload messages + chart.

---

### 🛠️ External Libraries Used

* **React Router** (`useNavigate`): For routing/redirection.
* **Axios**: For HTTP requests to backend.
* **Highcharts + HighchartsReact**: For chart visualization.
* **SCSS**: Custom styles via `chat.scss`.

---

If you’re building a **chatbot with chart + file upload support**, this is a strong example combining frontend UX + backend API interaction + visual data rendering. Let me know if you want the backend code explained or a UI preview generated.
